/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type RevenueShareStruct = {
  rTokenDist: PromiseOrValue<BigNumberish>;
  rsrDist: PromiseOrValue<BigNumberish>;
};

export type RevenueShareStructOutput = [number, number] & {
  rTokenDist: number;
  rsrDist: number;
};

export type RevenueTotalsStruct = {
  rTokenTotal: PromiseOrValue<BigNumberish>;
  rsrTotal: PromiseOrValue<BigNumberish>;
};

export type RevenueTotalsStructOutput = [number, number] & {
  rTokenTotal: number;
  rsrTotal: number;
};

export interface DistributorInterface extends utils.Interface {
  functions: {
    "FURNACE()": FunctionFragment;
    "MAX_DESTINATIONS_ALLOWED()": FunctionFragment;
    "ST_RSR()": FunctionFragment;
    "distribute(address,address,uint256)": FunctionFragment;
    "distribution(address)": FunctionFragment;
    "init(address,(uint16,uint16))": FunctionFragment;
    "main()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "setDistribution(address,(uint16,uint16))": FunctionFragment;
    "totals()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FURNACE"
      | "MAX_DESTINATIONS_ALLOWED"
      | "ST_RSR"
      | "distribute"
      | "distribution"
      | "init"
      | "main"
      | "proxiableUUID"
      | "setDistribution"
      | "totals"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "FURNACE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_DESTINATIONS_ALLOWED",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ST_RSR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distribution",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [PromiseOrValue<string>, RevenueShareStruct]
  ): string;
  encodeFunctionData(functionFragment: "main", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDistribution",
    values: [PromiseOrValue<string>, RevenueShareStruct]
  ): string;
  encodeFunctionData(functionFragment: "totals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "FURNACE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DESTINATIONS_ALLOWED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ST_RSR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "main", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "DistributionSet(address,uint16,uint16)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RevenueDistributed(address,address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenueDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DistributionSetEventObject {
  dest: string;
  rTokenDist: number;
  rsrDist: number;
}
export type DistributionSetEvent = TypedEvent<
  [string, number, number],
  DistributionSetEventObject
>;

export type DistributionSetEventFilter = TypedEventFilter<DistributionSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RevenueDistributedEventObject {
  erc20: string;
  source: string;
  amount: BigNumber;
}
export type RevenueDistributedEvent = TypedEvent<
  [string, string, BigNumber],
  RevenueDistributedEventObject
>;

export type RevenueDistributedEventFilter =
  TypedEventFilter<RevenueDistributedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Distributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FURNACE(overrides?: CallOverrides): Promise<[string]>;

    MAX_DESTINATIONS_ALLOWED(overrides?: CallOverrides): Promise<[number]>;

    ST_RSR(overrides?: CallOverrides): Promise<[string]>;

    distribute(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distribution(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { rTokenDist: number; rsrDist: number }>;

    init(
      main_: PromiseOrValue<string>,
      dist: RevenueShareStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    main(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    setDistribution(
      dest: PromiseOrValue<string>,
      share: RevenueShareStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totals(
      overrides?: CallOverrides
    ): Promise<
      [RevenueTotalsStructOutput] & { revTotals: RevenueTotalsStructOutput }
    >;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  FURNACE(overrides?: CallOverrides): Promise<string>;

  MAX_DESTINATIONS_ALLOWED(overrides?: CallOverrides): Promise<number>;

  ST_RSR(overrides?: CallOverrides): Promise<string>;

  distribute(
    erc20: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distribution(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, number] & { rTokenDist: number; rsrDist: number }>;

  init(
    main_: PromiseOrValue<string>,
    dist: RevenueShareStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  main(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  setDistribution(
    dest: PromiseOrValue<string>,
    share: RevenueShareStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totals(overrides?: CallOverrides): Promise<RevenueTotalsStructOutput>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FURNACE(overrides?: CallOverrides): Promise<string>;

    MAX_DESTINATIONS_ALLOWED(overrides?: CallOverrides): Promise<number>;

    ST_RSR(overrides?: CallOverrides): Promise<string>;

    distribute(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    distribution(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { rTokenDist: number; rsrDist: number }>;

    init(
      main_: PromiseOrValue<string>,
      dist: RevenueShareStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    main(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    setDistribution(
      dest: PromiseOrValue<string>,
      share: RevenueShareStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    totals(overrides?: CallOverrides): Promise<RevenueTotalsStructOutput>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "DistributionSet(address,uint16,uint16)"(
      dest?: null,
      rTokenDist?: null,
      rsrDist?: null
    ): DistributionSetEventFilter;
    DistributionSet(
      dest?: null,
      rTokenDist?: null,
      rsrDist?: null
    ): DistributionSetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RevenueDistributed(address,address,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      source?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): RevenueDistributedEventFilter;
    RevenueDistributed(
      erc20?: PromiseOrValue<string> | null,
      source?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): RevenueDistributedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    FURNACE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DESTINATIONS_ALLOWED(overrides?: CallOverrides): Promise<BigNumber>;

    ST_RSR(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distribution(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      main_: PromiseOrValue<string>,
      dist: RevenueShareStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    main(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    setDistribution(
      dest: PromiseOrValue<string>,
      share: RevenueShareStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totals(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FURNACE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_DESTINATIONS_ALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ST_RSR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribute(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distribution(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      main_: PromiseOrValue<string>,
      dist: RevenueShareStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    main(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDistribution(
      dest: PromiseOrValue<string>,
      share: RevenueShareStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
