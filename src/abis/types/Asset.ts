/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AssetInterface extends utils.Interface {
  functions: {
    "bal(address)": FunctionFragment;
    "chainlinkFeed()": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "erc20()": FunctionFragment;
    "erc20Decimals()": FunctionFragment;
    "isCollateral()": FunctionFragment;
    "lastSave()": FunctionFragment;
    "lotPrice()": FunctionFragment;
    "maxTradeVolume()": FunctionFragment;
    "oracleError()": FunctionFragment;
    "oracleTimeout()": FunctionFragment;
    "price()": FunctionFragment;
    "priceTimeout()": FunctionFragment;
    "refresh()": FunctionFragment;
    "savedHighPrice()": FunctionFragment;
    "savedLowPrice()": FunctionFragment;
    "tryPrice()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bal"
      | "chainlinkFeed"
      | "claimRewards"
      | "erc20"
      | "erc20Decimals"
      | "isCollateral"
      | "lastSave"
      | "lotPrice"
      | "maxTradeVolume"
      | "oracleError"
      | "oracleTimeout"
      | "price"
      | "priceTimeout"
      | "refresh"
      | "savedHighPrice"
      | "savedLowPrice"
      | "tryPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "erc20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "erc20Decimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastSave", values?: undefined): string;
  encodeFunctionData(functionFragment: "lotPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxTradeVolume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "refresh", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "savedHighPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "savedLowPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tryPrice", values?: undefined): string;

  decodeFunctionResult(functionFragment: "bal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc20Decimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastSave", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lotPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTradeVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refresh", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "savedHighPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "savedLowPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tryPrice", data: BytesLike): Result;

  events: {
    "RewardsClaimed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
}

export interface RewardsClaimedEventObject {
  erc20: string;
  amount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface Asset extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AssetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bal(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    chainlinkFeed(overrides?: CallOverrides): Promise<[string]>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    erc20(overrides?: CallOverrides): Promise<[string]>;

    erc20Decimals(overrides?: CallOverrides): Promise<[number]>;

    isCollateral(overrides?: CallOverrides): Promise<[boolean]>;

    lastSave(overrides?: CallOverrides): Promise<[number]>;

    lotPrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { lotLow: BigNumber; lotHigh: BigNumber }
    >;

    maxTradeVolume(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleError(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleTimeout(overrides?: CallOverrides): Promise<[number]>;

    price(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    priceTimeout(overrides?: CallOverrides): Promise<[number]>;

    refresh(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    savedHighPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    savedLowPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    tryPrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & { low: BigNumber; high: BigNumber }
    >;
  };

  bal(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  chainlinkFeed(overrides?: CallOverrides): Promise<string>;

  claimRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  erc20(overrides?: CallOverrides): Promise<string>;

  erc20Decimals(overrides?: CallOverrides): Promise<number>;

  isCollateral(overrides?: CallOverrides): Promise<boolean>;

  lastSave(overrides?: CallOverrides): Promise<number>;

  lotPrice(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { lotLow: BigNumber; lotHigh: BigNumber }
  >;

  maxTradeVolume(overrides?: CallOverrides): Promise<BigNumber>;

  oracleError(overrides?: CallOverrides): Promise<BigNumber>;

  oracleTimeout(overrides?: CallOverrides): Promise<number>;

  price(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  priceTimeout(overrides?: CallOverrides): Promise<number>;

  refresh(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  savedHighPrice(overrides?: CallOverrides): Promise<BigNumber>;

  savedLowPrice(overrides?: CallOverrides): Promise<BigNumber>;

  tryPrice(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & { low: BigNumber; high: BigNumber }
  >;

  callStatic: {
    bal(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainlinkFeed(overrides?: CallOverrides): Promise<string>;

    claimRewards(overrides?: CallOverrides): Promise<void>;

    erc20(overrides?: CallOverrides): Promise<string>;

    erc20Decimals(overrides?: CallOverrides): Promise<number>;

    isCollateral(overrides?: CallOverrides): Promise<boolean>;

    lastSave(overrides?: CallOverrides): Promise<number>;

    lotPrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { lotLow: BigNumber; lotHigh: BigNumber }
    >;

    maxTradeVolume(overrides?: CallOverrides): Promise<BigNumber>;

    oracleError(overrides?: CallOverrides): Promise<BigNumber>;

    oracleTimeout(overrides?: CallOverrides): Promise<number>;

    price(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    priceTimeout(overrides?: CallOverrides): Promise<number>;

    refresh(overrides?: CallOverrides): Promise<void>;

    savedHighPrice(overrides?: CallOverrides): Promise<BigNumber>;

    savedLowPrice(overrides?: CallOverrides): Promise<BigNumber>;

    tryPrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & { low: BigNumber; high: BigNumber }
    >;
  };

  filters: {
    "RewardsClaimed(address,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      erc20?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): RewardsClaimedEventFilter;
  };

  estimateGas: {
    bal(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainlinkFeed(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    erc20(overrides?: CallOverrides): Promise<BigNumber>;

    erc20Decimals(overrides?: CallOverrides): Promise<BigNumber>;

    isCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    lastSave(overrides?: CallOverrides): Promise<BigNumber>;

    lotPrice(overrides?: CallOverrides): Promise<BigNumber>;

    maxTradeVolume(overrides?: CallOverrides): Promise<BigNumber>;

    oracleError(overrides?: CallOverrides): Promise<BigNumber>;

    oracleTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    priceTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    refresh(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    savedHighPrice(overrides?: CallOverrides): Promise<BigNumber>;

    savedLowPrice(overrides?: CallOverrides): Promise<BigNumber>;

    tryPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bal(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainlinkFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    erc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc20Decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastSave(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lotPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTradeVolume(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleTimeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceTimeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refresh(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    savedHighPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    savedLowPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tryPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
